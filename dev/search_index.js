var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = C25Challenge","category":"page"},{"location":"#C25Challenge","page":"Home","title":"C25Challenge","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for C25Challenge.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [C25Challenge]","category":"page"},{"location":"#C25Challenge.EdgeWeight","page":"Home","title":"C25Challenge.EdgeWeight","text":"EdgeWeight\n\nStores the weight of an edge in a StreetGraph\n\nFields\n\nduration::Integer : The duration to traverse the edge or street\nrate::Float64: The rate of taking the edge or street\nnvisited::Float64: The number of times the edge has been visited\n\n\n\n\n\n","category":"type"},{"location":"#C25Challenge.StreetGraph","page":"Home","title":"C25Challenge.StreetGraph","text":"StreetGraph\n\nMaster graph representing the street system of a City, wrapper for ValOutDiGraph and stores other properties of the problem.\n\nFields\n\ngraph::SimpleValueGraphs.ValOutDiGraph: Graph Representation of the City \nN::Integer: number of cars\nstart::Integer: The index of the initial junction\ntotalTime::Integer: time limit of the problem\n\n\n\n\n\n","category":"type"},{"location":"#C25Challenge.Problem-Tuple{}","page":"Home","title":"C25Challenge.Problem","text":"Problem()\n\nReturn a StreetGraph\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.bestStepLookahead","page":"Home","title":"C25Challenge.bestStepLookahead","text":"bestStepLookahead(graph::StreetGraph, currentNode::Integer, depth=5)\n\nA lookahead function that calulates a heuristic and returns the corresponding next best node.\n\nParameters\n\ngraph: The graph format of the City\ncurrentNode: The current junction or node we are looking ahead after\ndepth: The depth of the lookahead search\n\n\n\n\n\n","category":"function"},{"location":"#C25Challenge.calcValue-Tuple{EdgeWeight}","page":"Home","title":"C25Challenge.calcValue","text":"calcValue(weight::EdgeWeight)\n\nCalculates a heuristic given an edge.\n\nParameters\n\nweight: The EdgeWeight that you calculate the heuristic on\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.compute_distance-Tuple{HashCode2014.Solution}","page":"Home","title":"C25Challenge.compute_distance","text":"compute_distance(solution::Solution)\n\nComputes the total distance of all itineraries in solution based on the StreetGraph Streets visited several times are only counted once.\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.feasible_check-Tuple{HashCode2014.Solution}","page":"Home","title":"C25Challenge.feasible_check","text":"feasible_check(solution, city[; verbose=false])\n\nCheck if solution satisfies the constraints of the problme statement The following criteria are considered:\n\nthe number of itineraries has to match the number of cars that traverse the city`\nthe first junction of each itinerary has to be the starting junction of city\nfor each consecutive pair of junctions on an itinerary, a street connecting these junctions has to exist in city (if the street is one directional, it has to be traversed in the correct direction)\nthe duration of each itinerary has to be lower or equal to the total duration of city\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.initStreetGraph-Tuple{HashCode2014.City}","page":"Home","title":"C25Challenge.initStreetGraph","text":"Used to construct a StreetGraph, returns StreetGraph object\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.outInformation-Tuple{StreetGraph, Integer}","page":"Home","title":"C25Challenge.outInformation","text":"outInformation(g::StreetGraph, node::Integer)\n\nReturns the information about the node. Specifically, the outedgevals, outneighbors, and max rate index     outvals, outneighbors, idx_max = outInformation(g::StreetGraph, node::Integer)\n\nParameters\n\nstreetGraph: The graph format of the City\nnode: The node on the graph format to get information about\n\n\n\n\n\n","category":"method"},{"location":"#C25Challenge.parallel_solver","page":"Home","title":"C25Challenge.parallel_solver","text":"parallel_solver(streetGraph::StreetGraph, lookahead=5)\n\nA greedy algorithm that solves the problem by sending the cars all at once\n\nParameters\n\nstreetGraph: The graph format of the City\nlookahead: The number of steps to lookahead\n\n\n\n\n\n","category":"function"},{"location":"#C25Challenge.random_parallel_solver","page":"Home","title":"C25Challenge.random_parallel_solver","text":"random_parallel_solver(streetGraph::StreetGraph, lookahead=5, pct_chance=5)\n\nA greedy algorithm that solves the problem in parallel but with random chance of going again\n\nParameters\n\nstreetGraph: The graph format of the City\nlookahead: The number of steps to lookahead\npct_chance: Drives random behavior for a car to go again\n\n\n\n\n\n","category":"function"},{"location":"#C25Challenge.series_solver","page":"Home","title":"C25Challenge.series_solver","text":"series_solver(streetGraph::StreetGraph, lookahead=5)\n\nA greedy algorithm that solves the problem by sending the cars one after another.\n\nParameters\n\nstreetGraph: The graph format of the City\nlookahead: The number of steps to lookahead\n\n\n\n\n\n","category":"function"},{"location":"#C25Challenge.updateNVisited!-Tuple{StreetGraph, Integer, Integer, Integer}","page":"Home","title":"C25Challenge.updateNVisited!","text":"NEW UTILS !!! NEED TO DOCUMENT THESE\n\n\n\n\n\n","category":"method"}]
}
